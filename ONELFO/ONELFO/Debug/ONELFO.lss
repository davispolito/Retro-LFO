
ONELFO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000710  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006c  0080006c  000007b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b49  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000742  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
   2:	b2 c0       	rjmp	.+356    	; 0x168 <__bad_interrupt>
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	b0 c0       	rjmp	.+352    	; 0x168 <__bad_interrupt>
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	ae c0       	rjmp	.+348    	; 0x168 <__bad_interrupt>
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	ac c0       	rjmp	.+344    	; 0x168 <__bad_interrupt>
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	44 c1       	rjmp	.+648    	; 0x29c <__vector_9>
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	a8 c0       	rjmp	.+336    	; 0x168 <__bad_interrupt>
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	a6 c0       	rjmp	.+332    	; 0x168 <__bad_interrupt>
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	a4 c0       	rjmp	.+328    	; 0x168 <__bad_interrupt>
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	57 c1       	rjmp	.+686    	; 0x2d2 <__vector_9+0x36>
  24:	5d c1       	rjmp	.+698    	; 0x2e0 <__vector_9+0x44>
  26:	63 c1       	rjmp	.+710    	; 0x2ee <__vector_9+0x52>
  28:	69 c1       	rjmp	.+722    	; 0x2fc <__vector_9+0x60>
  2a:	6f c1       	rjmp	.+734    	; 0x30a <__vector_9+0x6e>
  2c:	75 c1       	rjmp	.+746    	; 0x318 <__vector_9+0x7c>
  2e:	7b c1       	rjmp	.+758    	; 0x326 <__vector_9+0x8a>
  30:	81 c1       	rjmp	.+770    	; 0x334 <__vector_9+0x98>

00000032 <__trampolines_end>:
  32:	80 83       	st	Z, r24
  34:	86 89       	ldd	r24, Z+22	; 0x16
  36:	8c 8f       	std	Y+28, r24	; 0x1c
  38:	92 95       	swap	r25
  3a:	98 9c       	mul	r9, r8
  3c:	9f a2       	std	Y+39, r9	; 0x27
  3e:	a5 a8       	ldd	r10, Z+53	; 0x35
  40:	ab ae       	std	Y+59, r10	; 0x3b
  42:	b0 b3       	in	r27, 0x10	; 16
  44:	b6 b9       	out	0x06, r27	; 6
  46:	bc bf       	out	0x3c, r27	; 60
  48:	c1 c4       	rjmp	.+2434   	; 0x9cc <__data_load_end+0x2b0>
  4a:	c7 c9       	rjmp	.-3186   	; 0xfffff3da <__eeprom_end+0xff7ef3da>
  4c:	cc ce       	rjmp	.-616    	; 0xfffffde6 <__eeprom_end+0xff7efde6>
  4e:	d1 d3       	rcall	.+1954   	; 0x7f2 <__data_load_end+0xd6>
  50:	d5 d8       	rcall	.-3670   	; 0xfffff1fc <__eeprom_end+0xff7ef1fc>
  52:	da dc       	rcall	.-1612   	; 0xfffffa08 <__eeprom_end+0xff7efa08>
  54:	de e0       	ldi	r29, 0x0E	; 14
  56:	e2 e4       	ldi	r30, 0x42	; 66
  58:	e6 e8       	ldi	r30, 0x86	; 134
  5a:	ea ec       	ldi	r30, 0xCA	; 202
  5c:	ed ef       	ldi	r30, 0xFD	; 253
  5e:	f0 f2       	brcs	.-68     	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
  60:	f3 f5       	brvc	.+124    	; 0xde <__SREG__+0x9f>
  62:	f6 f7       	brtc	.-4      	; 0x60 <__SREG__+0x21>
  64:	f8 f9       	.word	0xf9f8	; ????
  66:	fa fb       	.word	0xfbfa	; ????
  68:	fc fc       	.word	0xfcfc	; ????
  6a:	fd fe       	.word	0xfefd	; ????
  6c:	fe ff       	.word	0xfffe	; ????
  6e:	ff ff       	.word	0xffff	; ????
  70:	ff ff       	.word	0xffff	; ????
  72:	ff ff       	.word	0xffff	; ????
  74:	ff ff       	.word	0xffff	; ????
  76:	ff ff       	.word	0xffff	; ????
  78:	fe fe       	.word	0xfefe	; ????
  7a:	fd fc       	.word	0xfcfd	; ????
  7c:	fc fb       	.word	0xfbfc	; ????
  7e:	fa f9       	.word	0xf9fa	; ????
  80:	f8 f7       	brcc	.-2      	; 0x80 <__SREG__+0x41>
  82:	f6 f5       	brtc	.+124    	; 0x100 <__SREG__+0xc1>
  84:	f3 f2       	brvs	.-68     	; 0x42 <__SREG__+0x3>
  86:	f0 ef       	ldi	r31, 0xF0	; 240
  88:	ed ec       	ldi	r30, 0xCD	; 205
  8a:	ea e8       	ldi	r30, 0x8A	; 138
  8c:	e6 e4       	ldi	r30, 0x46	; 70
  8e:	e2 e0       	ldi	r30, 0x02	; 2
  90:	de dc       	rcall	.-1604   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
  92:	da d8       	rcall	.-3660   	; 0xfffff248 <__eeprom_end+0xff7ef248>
  94:	d5 d3       	rcall	.+1962   	; 0x840 <__data_load_end+0x124>
  96:	d1 ce       	rjmp	.-606    	; 0xfffffe3a <__eeprom_end+0xff7efe3a>
  98:	cc c9       	rjmp	.-3176   	; 0xfffff432 <__eeprom_end+0xff7ef432>
  9a:	c7 c4       	rjmp	.+2446   	; 0xa2a <__data_load_end+0x30e>
  9c:	c1 bf       	out	0x31, r28	; 49
  9e:	bc b9       	out	0x0c, r27	; 12
  a0:	b6 b3       	in	r27, 0x16	; 22
  a2:	b0 ae       	std	Z+56, r11	; 0x38
  a4:	ab a8       	ldd	r10, Y+51	; 0x33
  a6:	a5 a2       	std	Z+37, r10	; 0x25
  a8:	9f 9c       	mul	r9, r15
  aa:	98 95       	break
  ac:	92 8f       	std	Z+26, r25	; 0x1a
  ae:	8c 89       	ldd	r24, Y+20	; 0x14
  b0:	86 83       	std	Z+6, r24	; 0x06
  b2:	80 7c       	andi	r24, 0xC0	; 192
  b4:	79 76       	andi	r23, 0x69	; 105
  b6:	73 70       	andi	r23, 0x03	; 3
  b8:	6d 6a       	ori	r22, 0xAD	; 173
  ba:	67 63       	ori	r22, 0x37	; 55
  bc:	60 5d       	subi	r22, 0xD0	; 208
  be:	5a 57       	subi	r21, 0x7A	; 122
  c0:	54 51       	subi	r21, 0x14	; 20
  c2:	4f 4c       	sbci	r20, 0xCF	; 207
  c4:	49 46       	sbci	r20, 0x69	; 105
  c6:	43 40       	sbci	r20, 0x03	; 3
  c8:	3e 3b       	cpi	r19, 0xBE	; 190
  ca:	38 36       	cpi	r19, 0x68	; 104
  cc:	33 31       	cpi	r19, 0x13	; 19
  ce:	2e 2c       	mov	r2, r14
  d0:	2a 27       	eor	r18, r26
  d2:	25 23       	and	r18, r21
  d4:	21 1f       	adc	r18, r17
  d6:	1d 1b       	sub	r17, r29
  d8:	19 17       	cp	r17, r25
  da:	15 13       	cpse	r17, r21
  dc:	12 10       	cpse	r1, r2
  de:	0f 0d       	add	r16, r15
  e0:	0c 0a       	sbc	r0, r28
  e2:	09 08       	sbc	r0, r9
  e4:	07 06       	cpc	r0, r23
  e6:	05 04       	cpc	r0, r5
  e8:	03 03       	mulsu	r16, r19
  ea:	02 01       	movw	r0, r4
  ec:	01 00       	.word	0x0001	; ????
	...
  f6:	00 00       	nop
  f8:	01 01       	movw	r0, r2
  fa:	02 03       	mulsu	r16, r18
  fc:	03 04       	cpc	r0, r3
  fe:	05 06       	cpc	r0, r21
 100:	07 08       	sbc	r0, r7
 102:	09 0a       	sbc	r0, r25
 104:	0c 0d       	add	r16, r12
 106:	0f 10       	cpse	r0, r15
 108:	12 13       	cpse	r17, r18
 10a:	15 17       	cp	r17, r21
 10c:	19 1b       	sub	r17, r25
 10e:	1d 1f       	adc	r17, r29
 110:	21 23       	and	r18, r17
 112:	25 27       	eor	r18, r21
 114:	2a 2c       	mov	r2, r10
 116:	2e 31       	cpi	r18, 0x1E	; 30
 118:	33 36       	cpi	r19, 0x63	; 99
 11a:	38 3b       	cpi	r19, 0xB8	; 184
 11c:	3e 40       	sbci	r19, 0x0E	; 14
 11e:	43 46       	sbci	r20, 0x63	; 99
 120:	49 4c       	sbci	r20, 0xC9	; 201
 122:	4f 51       	subi	r20, 0x1F	; 31
 124:	54 57       	subi	r21, 0x74	; 116
 126:	5a 5d       	subi	r21, 0xDA	; 218
 128:	60 63       	ori	r22, 0x30	; 48
 12a:	67 6a       	ori	r22, 0xA7	; 167
 12c:	6d 70       	andi	r22, 0x0D	; 13
 12e:	73 76       	andi	r23, 0x63	; 99
 130:	79 7c       	andi	r23, 0xC9	; 201

00000132 <__ctors_end>:
 132:	11 24       	eor	r1, r1
 134:	1f be       	out	0x3f, r1	; 63
 136:	cf e5       	ldi	r28, 0x5F	; 95
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	a0 e6       	ldi	r26, 0x60	; 96
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e0 e1       	ldi	r30, 0x10	; 16
 146:	f7 e0       	ldi	r31, 0x07	; 7
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x10>
 14a:	05 90       	lpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	ac 36       	cpi	r26, 0x6C	; 108
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0xc>

00000154 <__do_clear_bss>:
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	ac e6       	ldi	r26, 0x6C	; 108
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a9 37       	cpi	r26, 0x79	; 121
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	db d1       	rcall	.+950    	; 0x51c <main>
 166:	d2 c2       	rjmp	.+1444   	; 0x70c <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <sawtooth>:
}
uint16_t map_m(uint16_t input_end, uint16_t input_start, uint16_t output_end, uint16_t output_start,  uint16_t input){
	uint16_t slope = (output_end - output_start) / (input_end - input_start);
	uint16_t output = output_start + slope * (input - input_start);
	return output;
}
 16a:	fc 01       	movw	r30, r24
 16c:	90 81       	ld	r25, Z
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 0f       	add	r24, r25
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <reversesaw>:
 176:	fc 01       	movw	r30, r24
 178:	90 81       	ld	r25, Z
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	89 0f       	add	r24, r25
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <triangle>:
 182:	fc 01       	movw	r30, r24
 184:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ud.2127>
 188:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ud.2127+0x1>
 18c:	89 2b       	or	r24, r25
 18e:	51 f0       	breq	.+20     	; 0x1a4 <triangle+0x22>
 190:	80 81       	ld	r24, Z
 192:	82 50       	subi	r24, 0x02	; 2
 194:	80 83       	st	Z, r24
 196:	81 11       	cpse	r24, r1
 198:	10 c0       	rjmp	.+32     	; 0x1ba <triangle+0x38>
 19a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ud.2127+0x1>
 19e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ud.2127>
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <triangle+0x38>
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 5f       	subi	r24, 0xFE	; 254
 1a8:	80 83       	st	Z, r24
 1aa:	8e 3f       	cpi	r24, 0xFE	; 254
 1ac:	31 f4       	brne	.+12     	; 0x1ba <triangle+0x38>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ud.2127+0x1>
 1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ud.2127>
 1ba:	80 81       	ld	r24, Z
 1bc:	08 95       	ret

000001be <square_p>:
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 83       	st	Z, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	8e 37       	cpi	r24, 0x7E	; 126
 1ca:	91 05       	cpc	r25, r1
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <square_p+0x18>
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <val.2132>
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <square_p+0x1e>
 1d6:	2e ef       	ldi	r18, 0xFE	; 254
 1d8:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <val.2132>
 1dc:	6c ef       	ldi	r22, 0xFC	; 252
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	d2 d1       	rcall	.+932    	; 0x586 <__divmodhi4>
 1e2:	80 83       	st	Z, r24
 1e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <val.2132>
 1e8:	08 95       	ret

000001ea <square_n>:
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	8e 37       	cpi	r24, 0x7E	; 126
 1f6:	91 05       	cpc	r25, r1
 1f8:	24 f4       	brge	.+8      	; 0x202 <square_n+0x18>
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <val.2137>
 200:	03 c0       	rjmp	.+6      	; 0x208 <square_n+0x1e>
 202:	2f e7       	ldi	r18, 0x7F	; 127
 204:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <val.2137>
 208:	6c ef       	ldi	r22, 0xFC	; 252
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	bc d1       	rcall	.+888    	; 0x586 <__divmodhi4>
 20e:	80 83       	st	Z, r24
 210:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <val.2137>
 214:	08 95       	ret

00000216 <square_f>:
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 83       	st	Z, r24
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	8e 37       	cpi	r24, 0x7E	; 126
 222:	91 05       	cpc	r25, r1
 224:	24 f4       	brge	.+8      	; 0x22e <square_f+0x18>
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <val.2142>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <square_f+0x1e>
 22e:	2e ef       	ldi	r18, 0xFE	; 254
 230:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <val.2142>
 234:	6c ef       	ldi	r22, 0xFC	; 252
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	a6 d1       	rcall	.+844    	; 0x586 <__divmodhi4>
 23a:	80 83       	st	Z, r24
 23c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val.2142>
 240:	08 95       	ret

00000242 <sinewave_>:
 242:	dc 01       	movw	r26, r24
 244:	ec 91       	ld	r30, X
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	2e 0f       	add	r18, r30
 24a:	2c 93       	st	X, r18
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ee 5c       	subi	r30, 0xCE	; 206
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	84 91       	lpm	r24, Z
 254:	08 95       	ret

00000256 <sampleAndHold>:
 256:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i.2147>
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	98 0f       	add	r25, r24
 25e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <i.2147>
 262:	81 11       	cpse	r24, r1
 264:	03 c0       	rjmp	.+6      	; 0x26c <sampleAndHold+0x16>
 266:	ec d1       	rcall	.+984    	; 0x640 <rand>
 268:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 26c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 270:	08 95       	ret

00000272 <dither>:
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <wave_ptr>
 27c:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <wave_ptr+0x1>
 280:	86 e7       	ldi	r24, 0x76	; 118
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	09 95       	icall
 286:	20 97       	sbiw	r28, 0x00	; 0
 288:	31 f0       	breq	.+12     	; 0x296 <dither+0x24>
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	9a 95       	dec	r25
 28e:	f1 f7       	brne	.-4      	; 0x28c <dither+0x1a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <dither+0x20>
 292:	21 97       	sbiw	r28, 0x01	; 1
 294:	d1 f7       	brne	.-12     	; 0x28a <dither+0x18>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <__vector_9>:
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
 2be:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <wave>
 2c2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <wave+0x1>
 2c6:	e8 30       	cpi	r30, 0x08	; 8
 2c8:	f1 05       	cpc	r31, r1
 2ca:	d0 f5       	brcc	.+116    	; 0x340 <__vector_9+0xa4>
 2cc:	ef 5e       	subi	r30, 0xEF	; 239
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	09 94       	ijmp
 2d2:	81 e2       	ldi	r24, 0x21	; 33
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 2da:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 2de:	30 c0       	rjmp	.+96     	; 0x340 <__vector_9+0xa4>
 2e0:	85 eb       	ldi	r24, 0xB5	; 181
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 2e8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 2ec:	29 c0       	rjmp	.+82     	; 0x340 <__vector_9+0xa4>
 2ee:	8b eb       	ldi	r24, 0xBB	; 187
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 2f6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 2fa:	22 c0       	rjmp	.+68     	; 0x340 <__vector_9+0xa4>
 2fc:	81 ec       	ldi	r24, 0xC1	; 193
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 304:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 308:	1b c0       	rjmp	.+54     	; 0x340 <__vector_9+0xa4>
 30a:	8f ed       	ldi	r24, 0xDF	; 223
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 312:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 316:	14 c0       	rjmp	.+40     	; 0x340 <__vector_9+0xa4>
 318:	8b e2       	ldi	r24, 0x2B	; 43
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 320:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 324:	0d c0       	rjmp	.+26     	; 0x340 <__vector_9+0xa4>
 326:	85 ef       	ldi	r24, 0xF5	; 245
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 32e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 332:	06 c0       	rjmp	.+12     	; 0x340 <__vector_9+0xa4>
 334:	8b e0       	ldi	r24, 0x0B	; 11
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <wave_ptr+0x1>
 33c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <wave_ptr>
 340:	66 b7       	in	r22, 0x36	; 54
 342:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <delay>
 346:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <delay+0x1>
 34a:	93 df       	rcall	.-218    	; 0x272 <dither>
 34c:	86 bf       	out	0x36, r24	; 54
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <enableADC>:
 370:	8a b3       	in	r24, 0x1a	; 26
 372:	8a bb       	out	0x1a, r24	; 26
 374:	17 b8       	out	0x07, r1	; 7
 376:	86 b1       	in	r24, 0x06	; 6
 378:	87 60       	ori	r24, 0x07	; 7
 37a:	86 b9       	out	0x06, r24	; 6
 37c:	37 9a       	sbi	0x06, 7	; 6
 37e:	08 95       	ret

00000380 <VoltageToDelay>:

int16_t VoltageToDelay (uint16_t volt){
	if(volt < 500){
 380:	84 3f       	cpi	r24, 0xF4	; 244
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	92 07       	cpc	r25, r18
 386:	10 f4       	brcc	.+4      	; 0x38c <VoltageToDelay+0xc>
		return map_m(500, 50, 800, 60, volt);
 388:	0a 96       	adiw	r24, 0x0a	; 10
 38a:	08 95       	ret
	} else {
		return map_m(1024, 500, 9200, 700, volt);
 38c:	82 95       	swap	r24
 38e:	92 95       	swap	r25
 390:	90 7f       	andi	r25, 0xF0	; 240
 392:	98 27       	eor	r25, r24
 394:	80 7f       	andi	r24, 0xF0	; 240
 396:	98 27       	eor	r25, r24
 398:	84 58       	subi	r24, 0x84	; 132
 39a:	9c 41       	sbci	r25, 0x1C	; 28
	}
	//9000 top value (.3 Hz)  60 - 30 Hz
}
 39c:	08 95       	ret

0000039e <VoltageToWave>:

void VoltageToWave (uint16_t volt){
	if (volt < 100){
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	91 05       	cpc	r25, r1
 3a2:	28 f4       	brcc	.+10     	; 0x3ae <VoltageToWave+0x10>
		wave = SINE;
 3a4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <wave+0x1>
 3a8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <wave>
 3ac:	08 95       	ret
	} else if (volt < 200){
 3ae:	88 3c       	cpi	r24, 0xC8	; 200
 3b0:	91 05       	cpc	r25, r1
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <VoltageToWave+0x24>
		wave = SAW;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 3bc:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 3c0:	08 95       	ret
	} else if (volt < 300){
 3c2:	8c 32       	cpi	r24, 0x2C	; 44
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	92 07       	cpc	r25, r18
 3c8:	38 f4       	brcc	.+14     	; 0x3d8 <VoltageToWave+0x3a>
		wave = RSAW;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 3d2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 3d6:	08 95       	ret
	} else if (volt < 400){
 3d8:	80 39       	cpi	r24, 0x90	; 144
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	92 07       	cpc	r25, r18
 3de:	38 f4       	brcc	.+14     	; 0x3ee <VoltageToWave+0x50>
		wave = TRI;
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 3e8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 3ec:	08 95       	ret
	} else if (volt < 700){
 3ee:	8c 3b       	cpi	r24, 0xBC	; 188
 3f0:	22 e0       	ldi	r18, 0x02	; 2
 3f2:	92 07       	cpc	r25, r18
 3f4:	38 f4       	brcc	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		wave = SQUAREP;
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 3fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 402:	08 95       	ret
	} else if (volt < 800){
 404:	80 32       	cpi	r24, 0x20	; 32
 406:	23 e0       	ldi	r18, 0x03	; 3
 408:	92 07       	cpc	r25, r18
 40a:	38 f4       	brcc	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		wave = SQUAREN;
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 414:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 418:	08 95       	ret
	} else if (volt < 900) {
 41a:	84 38       	cpi	r24, 0x84	; 132
 41c:	93 40       	sbci	r25, 0x03	; 3
 41e:	38 f4       	brcc	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		wave = SQUAREF;
 420:	87 e0       	ldi	r24, 0x07	; 7
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 428:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 42c:	08 95       	ret
	} else {
		wave = SH;
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <wave+0x1>
 436:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <wave>
 43a:	08 95       	ret

0000043c <adc_conversion>:
	}
}

void adc_conversion(uint8_t input){
	//clear lower 3 bits of admux
	ADMUX &= 0xF8;
 43c:	97 b1       	in	r25, 0x07	; 7
 43e:	98 7f       	andi	r25, 0xF8	; 248
 440:	97 b9       	out	0x07, r25	; 7
	ADMUX |= input;
 442:	97 b1       	in	r25, 0x07	; 7
 444:	98 2b       	or	r25, r24
 446:	97 b9       	out	0x07, r25	; 7
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 448:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 44a:	36 99       	sbic	0x06, 6	; 6
 44c:	fe cf       	rjmp	.-4      	; 0x44a <adc_conversion+0xe>
	new_conversion = 0;
 44e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <new_conversion+0x1>
 452:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <new_conversion>
	new_conversion = ADCL;
 456:	24 b1       	in	r18, 0x04	; 4
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <new_conversion+0x1>
 45e:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <new_conversion>
	new_conversion |= ADCH << 8;
 462:	95 b1       	in	r25, 0x05	; 5
 464:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <new_conversion>
 468:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <new_conversion+0x1>
 46c:	39 2b       	or	r19, r25
 46e:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <new_conversion+0x1>
 472:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <new_conversion>
	ADCSRA |= (1<<ADSC);
 476:	36 9a       	sbi	0x06, 6	; 6
	if (input % 2){
 478:	80 ff       	sbrs	r24, 0
 47a:	26 c0       	rjmp	.+76     	; 0x4c8 <adc_conversion+0x8c>
		if ((new_conversion <= (wconversion - 30) || new_conversion >= (wconversion + 30))){
 47c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wconversion>
 480:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wconversion+0x1>
 484:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <new_conversion>
 488:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <new_conversion+0x1>
 48c:	4e 97       	sbiw	r24, 0x1e	; 30
 48e:	82 17       	cp	r24, r18
 490:	93 07       	cpc	r25, r19
 492:	60 f4       	brcc	.+24     	; 0x4ac <adc_conversion+0x70>
 494:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wconversion>
 498:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wconversion+0x1>
 49c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <new_conversion>
 4a0:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <new_conversion+0x1>
 4a4:	4e 96       	adiw	r24, 0x1e	; 30
 4a6:	28 17       	cp	r18, r24
 4a8:	39 07       	cpc	r19, r25
 4aa:	b8 f1       	brcs	.+110    	; 0x51a <adc_conversion+0xde>
			wconversion = new_conversion;
 4ac:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <new_conversion>
 4b0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <new_conversion+0x1>
 4b4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <wconversion+0x1>
 4b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wconversion>
			VoltageToWave(wconversion);
 4bc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wconversion>
 4c0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wconversion+0x1>
 4c4:	6c df       	rcall	.-296    	; 0x39e <VoltageToWave>
 4c6:	08 95       	ret
		}
		} else {
		if ((new_conversion <= (conversion - DEADBAND) || new_conversion >= (conversion + DEADBAND))){
 4c8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conversion>
 4cc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <conversion+0x1>
 4d0:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <new_conversion>
 4d4:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <new_conversion+0x1>
 4d8:	0a 97       	sbiw	r24, 0x0a	; 10
 4da:	82 17       	cp	r24, r18
 4dc:	93 07       	cpc	r25, r19
 4de:	60 f4       	brcc	.+24     	; 0x4f8 <adc_conversion+0xbc>
 4e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conversion>
 4e4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <conversion+0x1>
 4e8:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <new_conversion>
 4ec:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <new_conversion+0x1>
 4f0:	0a 96       	adiw	r24, 0x0a	; 10
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	88 f0       	brcs	.+34     	; 0x51a <adc_conversion+0xde>
			conversion = new_conversion;
 4f8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <new_conversion>
 4fc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <new_conversion+0x1>
 500:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <conversion+0x1>
 504:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <conversion>
			delay = VoltageToDelay(conversion);
 508:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conversion>
 50c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <conversion+0x1>
 510:	37 df       	rcall	.-402    	; 0x380 <VoltageToDelay>
 512:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <delay+0x1>
 516:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <delay>
 51a:	08 95       	ret

0000051c <main>:
}

//CLK FREQUENCY IS 8 MHz (be sure to set the system clock prescale to 0)
int main(void) {
	//Set PORTB1 pin as output
	cli();
 51c:	f8 94       	cli
	DDRB = (1 << PORTB2);
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	87 bb       	out	0x17, r24	; 23
	DDRA = (1 << PORTA7);
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	8a bb       	out	0x1a, r24	; 26
	// initial OCR1A value
	OCR0A=80;
 526:	90 e5       	ldi	r25, 0x50	; 80
 528:	96 bf       	out	0x36, r25	; 54
	//Output compare OC1A 8 bit non inverted PWM
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
 52a:	93 e8       	ldi	r25, 0x83	; 131
 52c:	90 bf       	out	0x30, r25	; 48
	//start timer without prescaler
	
	//enable output compare interrupt for OCR0A
	TIMSK0 = (1 << OCIE0A);
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	99 bf       	out	0x39, r25	; 57
	CLKPR = (1 << CLKPCE); 
 532:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
 534:	16 bc       	out	0x26, r1	; 38
    TCCR0B= (1 << CS00);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	83 bf       	out	0x33, r24	; 51
	//ADC
	enableADC();
 53a:	1a df       	rcall	.-460    	; 0x370 <enableADC>
	//enable global interrups
	sei();
 53c:	78 94       	sei
	int a = 0;
 53e:	c0 e0       	ldi	r28, 0x00	; 0
 540:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		adc_conversion(a);
 542:	8c 2f       	mov	r24, r28
 544:	7b df       	rcall	.-266    	; 0x43c <adc_conversion>
		a++;
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
		a %=2;
 54a:	81 70       	andi	r24, 0x01	; 1
 54c:	90 78       	andi	r25, 0x80	; 128
 54e:	99 23       	and	r25, r25
 550:	24 f4       	brge	.+8      	; 0x55a <main+0x3e>
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	8e 6f       	ori	r24, 0xFE	; 254
 556:	9f 6f       	ori	r25, 0xFF	; 255
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	ec 01       	movw	r28, r24
 55c:	f2 cf       	rjmp	.-28     	; 0x542 <main+0x26>

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <__divmodhi4>:
 586:	97 fb       	bst	r25, 7
 588:	07 2e       	mov	r0, r23
 58a:	16 f4       	brtc	.+4      	; 0x590 <__divmodhi4+0xa>
 58c:	00 94       	com	r0
 58e:	06 d0       	rcall	.+12     	; 0x59c <__divmodhi4_neg1>
 590:	77 fd       	sbrc	r23, 7
 592:	08 d0       	rcall	.+16     	; 0x5a4 <__divmodhi4_neg2>
 594:	e4 df       	rcall	.-56     	; 0x55e <__udivmodhi4>
 596:	07 fc       	sbrc	r0, 7
 598:	05 d0       	rcall	.+10     	; 0x5a4 <__divmodhi4_neg2>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__divmodhi4_exit>

0000059c <__divmodhi4_neg1>:
 59c:	90 95       	com	r25
 59e:	81 95       	neg	r24
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__divmodhi4_neg2>:
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255

000005aa <__divmodhi4_exit>:
 5aa:	08 95       	ret

000005ac <do_rand>:
 5ac:	8f 92       	push	r8
 5ae:	9f 92       	push	r9
 5b0:	af 92       	push	r10
 5b2:	bf 92       	push	r11
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	ec 01       	movw	r28, r24
 5c2:	68 81       	ld	r22, Y
 5c4:	79 81       	ldd	r23, Y+1	; 0x01
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	9b 81       	ldd	r25, Y+3	; 0x03
 5ca:	61 15       	cp	r22, r1
 5cc:	71 05       	cpc	r23, r1
 5ce:	81 05       	cpc	r24, r1
 5d0:	91 05       	cpc	r25, r1
 5d2:	21 f4       	brne	.+8      	; 0x5dc <do_rand+0x30>
 5d4:	64 e2       	ldi	r22, 0x24	; 36
 5d6:	79 ed       	ldi	r23, 0xD9	; 217
 5d8:	8b e5       	ldi	r24, 0x5B	; 91
 5da:	97 e0       	ldi	r25, 0x07	; 7
 5dc:	2d e1       	ldi	r18, 0x1D	; 29
 5de:	33 ef       	ldi	r19, 0xF3	; 243
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	55 d0       	rcall	.+170    	; 0x690 <__divmodsi4>
 5e6:	49 01       	movw	r8, r18
 5e8:	5a 01       	movw	r10, r20
 5ea:	27 ea       	ldi	r18, 0xA7	; 167
 5ec:	31 e4       	ldi	r19, 0x41	; 65
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	35 d0       	rcall	.+106    	; 0x65e <__mulsi3>
 5f4:	6b 01       	movw	r12, r22
 5f6:	7c 01       	movw	r14, r24
 5f8:	2c ee       	ldi	r18, 0xEC	; 236
 5fa:	34 ef       	ldi	r19, 0xF4	; 244
 5fc:	4f ef       	ldi	r20, 0xFF	; 255
 5fe:	5f ef       	ldi	r21, 0xFF	; 255
 600:	c5 01       	movw	r24, r10
 602:	b4 01       	movw	r22, r8
 604:	2c d0       	rcall	.+88     	; 0x65e <__mulsi3>
 606:	dc 01       	movw	r26, r24
 608:	cb 01       	movw	r24, r22
 60a:	8c 0d       	add	r24, r12
 60c:	9d 1d       	adc	r25, r13
 60e:	ae 1d       	adc	r26, r14
 610:	bf 1d       	adc	r27, r15
 612:	b7 ff       	sbrs	r27, 7
 614:	03 c0       	rjmp	.+6      	; 0x61c <do_rand+0x70>
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	a1 09       	sbc	r26, r1
 61a:	b0 48       	sbci	r27, 0x80	; 128
 61c:	88 83       	st	Y, r24
 61e:	99 83       	std	Y+1, r25	; 0x01
 620:	aa 83       	std	Y+2, r26	; 0x02
 622:	bb 83       	std	Y+3, r27	; 0x03
 624:	9f 77       	andi	r25, 0x7F	; 127
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	bf 90       	pop	r11
 634:	af 90       	pop	r10
 636:	9f 90       	pop	r9
 638:	8f 90       	pop	r8
 63a:	08 95       	ret

0000063c <rand_r>:
 63c:	b7 df       	rcall	.-146    	; 0x5ac <do_rand>
 63e:	08 95       	ret

00000640 <rand>:
 640:	80 e6       	ldi	r24, 0x60	; 96
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	b3 df       	rcall	.-154    	; 0x5ac <do_rand>
 646:	08 95       	ret

00000648 <srand>:
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 650:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 654:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 658:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 65c:	08 95       	ret

0000065e <__mulsi3>:
 65e:	ee 27       	eor	r30, r30
 660:	ff 27       	eor	r31, r31

00000662 <__mulsi3_helper>:
 662:	aa 27       	eor	r26, r26
 664:	bb 27       	eor	r27, r27
 666:	08 c0       	rjmp	.+16     	; 0x678 <__mulsi3_helper+0x16>
 668:	a2 0f       	add	r26, r18
 66a:	b3 1f       	adc	r27, r19
 66c:	e4 1f       	adc	r30, r20
 66e:	f5 1f       	adc	r31, r21
 670:	22 0f       	add	r18, r18
 672:	33 1f       	adc	r19, r19
 674:	44 1f       	adc	r20, r20
 676:	55 1f       	adc	r21, r21
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	77 95       	ror	r23
 67e:	67 95       	ror	r22
 680:	98 f3       	brcs	.-26     	; 0x668 <__mulsi3_helper+0x6>
 682:	70 40       	sbci	r23, 0x00	; 0
 684:	a9 f7       	brne	.-22     	; 0x670 <__mulsi3_helper+0xe>
 686:	00 97       	sbiw	r24, 0x00	; 0
 688:	99 f7       	brne	.-26     	; 0x670 <__mulsi3_helper+0xe>
 68a:	bd 01       	movw	r22, r26
 68c:	cf 01       	movw	r24, r30
 68e:	08 95       	ret

00000690 <__divmodsi4>:
 690:	05 2e       	mov	r0, r21
 692:	97 fb       	bst	r25, 7
 694:	16 f4       	brtc	.+4      	; 0x69a <__divmodsi4+0xa>
 696:	00 94       	com	r0
 698:	0f d0       	rcall	.+30     	; 0x6b8 <__negsi2>
 69a:	57 fd       	sbrc	r21, 7
 69c:	05 d0       	rcall	.+10     	; 0x6a8 <__divmodsi4_neg2>
 69e:	14 d0       	rcall	.+40     	; 0x6c8 <__udivmodsi4>
 6a0:	07 fc       	sbrc	r0, 7
 6a2:	02 d0       	rcall	.+4      	; 0x6a8 <__divmodsi4_neg2>
 6a4:	46 f4       	brtc	.+16     	; 0x6b6 <__divmodsi4_exit>
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <__negsi2>

000006a8 <__divmodsi4_neg2>:
 6a8:	50 95       	com	r21
 6aa:	40 95       	com	r20
 6ac:	30 95       	com	r19
 6ae:	21 95       	neg	r18
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	4f 4f       	sbci	r20, 0xFF	; 255
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255

000006b6 <__divmodsi4_exit>:
 6b6:	08 95       	ret

000006b8 <__negsi2>:
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__udivmodsi4>:
 6c8:	a1 e2       	ldi	r26, 0x21	; 33
 6ca:	1a 2e       	mov	r1, r26
 6cc:	aa 1b       	sub	r26, r26
 6ce:	bb 1b       	sub	r27, r27
 6d0:	fd 01       	movw	r30, r26
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__udivmodsi4_ep>

000006d4 <__udivmodsi4_loop>:
 6d4:	aa 1f       	adc	r26, r26
 6d6:	bb 1f       	adc	r27, r27
 6d8:	ee 1f       	adc	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	a2 17       	cp	r26, r18
 6de:	b3 07       	cpc	r27, r19
 6e0:	e4 07       	cpc	r30, r20
 6e2:	f5 07       	cpc	r31, r21
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__udivmodsi4_ep>
 6e6:	a2 1b       	sub	r26, r18
 6e8:	b3 0b       	sbc	r27, r19
 6ea:	e4 0b       	sbc	r30, r20
 6ec:	f5 0b       	sbc	r31, r21

000006ee <__udivmodsi4_ep>:
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a 94       	dec	r1
 6f8:	69 f7       	brne	.-38     	; 0x6d4 <__udivmodsi4_loop>
 6fa:	60 95       	com	r22
 6fc:	70 95       	com	r23
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	bd 01       	movw	r22, r26
 708:	cf 01       	movw	r24, r30
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
