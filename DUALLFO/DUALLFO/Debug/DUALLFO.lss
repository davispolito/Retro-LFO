
DUALLFO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  00000a28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbf  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f5  00000000  00000000  00001f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a43  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
   2:	aa c0       	rjmp	.+340    	; 0x158 <__bad_interrupt>
   4:	a9 c0       	rjmp	.+338    	; 0x158 <__bad_interrupt>
   6:	a8 c0       	rjmp	.+336    	; 0x158 <__bad_interrupt>
   8:	a7 c0       	rjmp	.+334    	; 0x158 <__bad_interrupt>
   a:	a6 c0       	rjmp	.+332    	; 0x158 <__bad_interrupt>
   c:	2a c1       	rjmp	.+596    	; 0x262 <__vector_6>
   e:	67 c1       	rjmp	.+718    	; 0x2de <__vector_7>
  10:	a3 c0       	rjmp	.+326    	; 0x158 <__bad_interrupt>
  12:	a2 c0       	rjmp	.+324    	; 0x158 <__bad_interrupt>
  14:	a1 c0       	rjmp	.+322    	; 0x158 <__bad_interrupt>
  16:	a0 c0       	rjmp	.+320    	; 0x158 <__bad_interrupt>
  18:	9f c0       	rjmp	.+318    	; 0x158 <__bad_interrupt>
  1a:	9e c0       	rjmp	.+316    	; 0x158 <__bad_interrupt>
  1c:	9d c0       	rjmp	.+314    	; 0x158 <__bad_interrupt>
  1e:	9c c0       	rjmp	.+312    	; 0x158 <__bad_interrupt>
  20:	9b c0       	rjmp	.+310    	; 0x158 <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	80 83       	st	Z, r24
  24:	86 89       	ldd	r24, Z+22	; 0x16
  26:	8c 8f       	std	Y+28, r24	; 0x1c
  28:	92 95       	swap	r25
  2a:	98 9c       	mul	r9, r8
  2c:	9f a2       	std	Y+39, r9	; 0x27
  2e:	a5 a8       	ldd	r10, Z+53	; 0x35
  30:	ab ae       	std	Y+59, r10	; 0x3b
  32:	b0 b3       	in	r27, 0x10	; 16
  34:	b6 b9       	out	0x06, r27	; 6
  36:	bc bf       	out	0x3c, r27	; 60
  38:	c1 c4       	rjmp	.+2434   	; 0x9bc <__data_load_end+0x28>
  3a:	c7 c9       	rjmp	.-3186   	; 0xfffff3ca <__eeprom_end+0xff7ef3ca>
  3c:	cc ce       	rjmp	.-616    	; 0xfffffdd6 <__eeprom_end+0xff7efdd6>
  3e:	d1 d3       	rcall	.+1954   	; 0x7e2 <__udivmodhi4_loop+0xc>
  40:	d5 d8       	rcall	.-3670   	; 0xfffff1ec <__eeprom_end+0xff7ef1ec>
  42:	da dc       	rcall	.-1612   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
  44:	de e0       	ldi	r29, 0x0E	; 14
  46:	e2 e4       	ldi	r30, 0x42	; 66
  48:	e6 e8       	ldi	r30, 0x86	; 134
  4a:	ea ec       	ldi	r30, 0xCA	; 202
  4c:	ed ef       	ldi	r30, 0xFD	; 253
  4e:	f0 f2       	brcs	.-68     	; 0xc <__FUSE_REGION_LENGTH__+0x9>
  50:	f3 f5       	brvc	.+124    	; 0xce <__SREG__+0x8f>
  52:	f6 f7       	brtc	.-4      	; 0x50 <__SREG__+0x11>
  54:	f8 f9       	.word	0xf9f8	; ????
  56:	fa fb       	.word	0xfbfa	; ????
  58:	fc fc       	.word	0xfcfc	; ????
  5a:	fd fe       	.word	0xfefd	; ????
  5c:	fe ff       	.word	0xfffe	; ????
  5e:	ff ff       	.word	0xffff	; ????
  60:	ff ff       	.word	0xffff	; ????
  62:	ff ff       	.word	0xffff	; ????
  64:	ff ff       	.word	0xffff	; ????
  66:	ff ff       	.word	0xffff	; ????
  68:	fe fe       	.word	0xfefe	; ????
  6a:	fd fc       	.word	0xfcfd	; ????
  6c:	fc fb       	.word	0xfbfc	; ????
  6e:	fa f9       	.word	0xf9fa	; ????
  70:	f8 f7       	brcc	.-2      	; 0x70 <__SREG__+0x31>
  72:	f6 f5       	brtc	.+124    	; 0xf0 <__SREG__+0xb1>
  74:	f3 f2       	brvs	.-68     	; 0x32 <__trampolines_end+0x10>
  76:	f0 ef       	ldi	r31, 0xF0	; 240
  78:	ed ec       	ldi	r30, 0xCD	; 205
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	e6 e4       	ldi	r30, 0x46	; 70
  7e:	e2 e0       	ldi	r30, 0x02	; 2
  80:	de dc       	rcall	.-1604   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
  82:	da d8       	rcall	.-3660   	; 0xfffff238 <__eeprom_end+0xff7ef238>
  84:	d5 d3       	rcall	.+1962   	; 0x830 <do_rand+0x14>
  86:	d1 ce       	rjmp	.-606    	; 0xfffffe2a <__eeprom_end+0xff7efe2a>
  88:	cc c9       	rjmp	.-3176   	; 0xfffff422 <__eeprom_end+0xff7ef422>
  8a:	c7 c4       	rjmp	.+2446   	; 0xa1a <__data_load_end+0x86>
  8c:	c1 bf       	out	0x31, r28	; 49
  8e:	bc b9       	out	0x0c, r27	; 12
  90:	b6 b3       	in	r27, 0x16	; 22
  92:	b0 ae       	std	Z+56, r11	; 0x38
  94:	ab a8       	ldd	r10, Y+51	; 0x33
  96:	a5 a2       	std	Z+37, r10	; 0x25
  98:	9f 9c       	mul	r9, r15
  9a:	98 95       	break
  9c:	92 8f       	std	Z+26, r25	; 0x1a
  9e:	8c 89       	ldd	r24, Y+20	; 0x14
  a0:	86 83       	std	Z+6, r24	; 0x06
  a2:	80 7c       	andi	r24, 0xC0	; 192
  a4:	79 76       	andi	r23, 0x69	; 105
  a6:	73 70       	andi	r23, 0x03	; 3
  a8:	6d 6a       	ori	r22, 0xAD	; 173
  aa:	67 63       	ori	r22, 0x37	; 55
  ac:	60 5d       	subi	r22, 0xD0	; 208
  ae:	5a 57       	subi	r21, 0x7A	; 122
  b0:	54 51       	subi	r21, 0x14	; 20
  b2:	4f 4c       	sbci	r20, 0xCF	; 207
  b4:	49 46       	sbci	r20, 0x69	; 105
  b6:	43 40       	sbci	r20, 0x03	; 3
  b8:	3e 3b       	cpi	r19, 0xBE	; 190
  ba:	38 36       	cpi	r19, 0x68	; 104
  bc:	33 31       	cpi	r19, 0x13	; 19
  be:	2e 2c       	mov	r2, r14
  c0:	2a 27       	eor	r18, r26
  c2:	25 23       	and	r18, r21
  c4:	21 1f       	adc	r18, r17
  c6:	1d 1b       	sub	r17, r29
  c8:	19 17       	cp	r17, r25
  ca:	15 13       	cpse	r17, r21
  cc:	12 10       	cpse	r1, r2
  ce:	0f 0d       	add	r16, r15
  d0:	0c 0a       	sbc	r0, r28
  d2:	09 08       	sbc	r0, r9
  d4:	07 06       	cpc	r0, r23
  d6:	05 04       	cpc	r0, r5
  d8:	03 03       	mulsu	r16, r19
  da:	02 01       	movw	r0, r4
  dc:	01 00       	.word	0x0001	; ????
	...
  e6:	00 00       	nop
  e8:	01 01       	movw	r0, r2
  ea:	02 03       	mulsu	r16, r18
  ec:	03 04       	cpc	r0, r3
  ee:	05 06       	cpc	r0, r21
  f0:	07 08       	sbc	r0, r7
  f2:	09 0a       	sbc	r0, r25
  f4:	0c 0d       	add	r16, r12
  f6:	0f 10       	cpse	r0, r15
  f8:	12 13       	cpse	r17, r18
  fa:	15 17       	cp	r17, r21
  fc:	19 1b       	sub	r17, r25
  fe:	1d 1f       	adc	r17, r29
 100:	21 23       	and	r18, r17
 102:	25 27       	eor	r18, r21
 104:	2a 2c       	mov	r2, r10
 106:	2e 31       	cpi	r18, 0x1E	; 30
 108:	33 36       	cpi	r19, 0x63	; 99
 10a:	38 3b       	cpi	r19, 0xB8	; 184
 10c:	3e 40       	sbci	r19, 0x0E	; 14
 10e:	43 46       	sbci	r20, 0x63	; 99
 110:	49 4c       	sbci	r20, 0xC9	; 201
 112:	4f 51       	subi	r20, 0x1F	; 31
 114:	54 57       	subi	r21, 0x74	; 116
 116:	5a 5d       	subi	r21, 0xDA	; 218
 118:	60 63       	ori	r22, 0x30	; 48
 11a:	67 6a       	ori	r22, 0xA7	; 167
 11c:	6d 70       	andi	r22, 0x0D	; 13
 11e:	73 76       	andi	r23, 0x63	; 99
 120:	79 7c       	andi	r23, 0xC9	; 201

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf e5       	ldi	r28, 0x5F	; 95
 128:	d1 e0       	ldi	r29, 0x01	; 1
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	a0 e6       	ldi	r26, 0x60	; 96
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f9 e0       	ldi	r31, 0x09	; 9
 138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
 13a:	05 90       	lpm	r0, Z+
 13c:	0d 92       	st	X+, r0
 13e:	a4 37       	cpi	r26, 0x74	; 116
 140:	b1 07       	cpc	r27, r17
 142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	a4 e7       	ldi	r26, 0x74	; 116
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
 14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
 14e:	a0 38       	cpi	r26, 0x80	; 128
 150:	b2 07       	cpc	r27, r18
 152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
 154:	0f d3       	rcall	.+1566   	; 0x774 <main>
 156:	12 c4       	rjmp	.+2084   	; 0x97c <_exit>

00000158 <__bad_interrupt>:
 158:	53 cf       	rjmp	.-346    	; 0x0 <__vectors>

0000015a <sawtooth>:
		wave = SQUAREF;
		} else {
		wave = SH;
	}
	return wave;
}
 15a:	fc 01       	movw	r30, r24
 15c:	90 81       	ld	r25, Z
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	89 0f       	add	r24, r25
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <reversesaw>:
 166:	fc 01       	movw	r30, r24
 168:	90 81       	ld	r25, Z
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	89 0f       	add	r24, r25
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <triangle>:
 172:	fc 01       	movw	r30, r24
 174:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <ud.2134>
 178:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <ud.2134+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	51 f0       	breq	.+20     	; 0x194 <triangle+0x22>
 180:	80 81       	ld	r24, Z
 182:	82 50       	subi	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
 186:	81 11       	cpse	r24, r1
 188:	10 c0       	rjmp	.+32     	; 0x1aa <triangle+0x38>
 18a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <ud.2134+0x1>
 18e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <ud.2134>
 192:	0b c0       	rjmp	.+22     	; 0x1aa <triangle+0x38>
 194:	80 81       	ld	r24, Z
 196:	8e 5f       	subi	r24, 0xFE	; 254
 198:	80 83       	st	Z, r24
 19a:	8e 3f       	cpi	r24, 0xFE	; 254
 19c:	31 f4       	brne	.+12     	; 0x1aa <triangle+0x38>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <ud.2134+0x1>
 1a6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <ud.2134>
 1aa:	80 81       	ld	r24, Z
 1ac:	08 95       	ret

000001ae <square_p>:
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 83       	st	Z, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	8e 37       	cpi	r24, 0x7E	; 126
 1ba:	91 05       	cpc	r25, r1
 1bc:	24 f4       	brge	.+8      	; 0x1c6 <square_p+0x18>
 1be:	2f e7       	ldi	r18, 0x7F	; 127
 1c0:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <val.2139>
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <square_p+0x1e>
 1c6:	2e ef       	ldi	r18, 0xFE	; 254
 1c8:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <val.2139>
 1cc:	6c ef       	ldi	r22, 0xFC	; 252
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	12 d3       	rcall	.+1572   	; 0x7f6 <__divmodhi4>
 1d2:	80 83       	st	Z, r24
 1d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <val.2139>
 1d8:	08 95       	ret

000001da <square_n>:
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8e 37       	cpi	r24, 0x7E	; 126
 1e6:	91 05       	cpc	r25, r1
 1e8:	24 f4       	brge	.+8      	; 0x1f2 <square_n+0x18>
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <val.2144>
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <square_n+0x1e>
 1f2:	2f e7       	ldi	r18, 0x7F	; 127
 1f4:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <val.2144>
 1f8:	6c ef       	ldi	r22, 0xFC	; 252
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	fc d2       	rcall	.+1528   	; 0x7f6 <__divmodhi4>
 1fe:	80 83       	st	Z, r24
 200:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <val.2144>
 204:	08 95       	ret

00000206 <square_f>:
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 83       	st	Z, r24
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	8e 37       	cpi	r24, 0x7E	; 126
 212:	91 05       	cpc	r25, r1
 214:	24 f4       	brge	.+8      	; 0x21e <square_f+0x18>
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <val.2149>
 21c:	03 c0       	rjmp	.+6      	; 0x224 <square_f+0x1e>
 21e:	2e ef       	ldi	r18, 0xFE	; 254
 220:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <val.2149>
 224:	6c ef       	ldi	r22, 0xFC	; 252
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	e6 d2       	rcall	.+1484   	; 0x7f6 <__divmodhi4>
 22a:	80 83       	st	Z, r24
 22c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val.2149>
 230:	08 95       	ret

00000232 <sinewave_>:
 232:	dc 01       	movw	r26, r24
 234:	ec 91       	ld	r30, X
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	2e 0f       	add	r18, r30
 23a:	2c 93       	st	X, r18
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ee 5d       	subi	r30, 0xDE	; 222
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	84 91       	lpm	r24, Z
 244:	08 95       	ret

00000246 <sampleAndHold>:
 246:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i.2154>
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	98 0f       	add	r25, r24
 24e:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <i.2154>
 252:	81 11       	cpse	r24, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <sampleAndHold+0x16>
 256:	2c d3       	rcall	.+1624   	; 0x8b0 <rand>
 258:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <b.2153>
 25c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <b.2153>
 260:	08 95       	ret

00000262 <__vector_6>:
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	c7 e6       	ldi	r28, 0x67	; 103
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	ec 81       	ldd	r30, Y+4	; 0x04
 28e:	fd 81       	ldd	r31, Y+5	; 0x05
 290:	ce 01       	movw	r24, r28
 292:	09 95       	icall
 294:	86 bf       	out	0x36, r24	; 54
 296:	2c b5       	in	r18, 0x2c	; 44
 298:	3d b5       	in	r19, 0x2d	; 45
 29a:	a9 01       	movw	r20, r18
 29c:	40 95       	com	r20
 29e:	50 95       	com	r21
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	9b 81       	ldd	r25, Y+3	; 0x03
 2a4:	48 17       	cp	r20, r24
 2a6:	59 07       	cpc	r21, r25
 2a8:	18 f4       	brcc	.+6      	; 0x2b0 <__vector_6+0x4e>
 2aa:	84 1b       	sub	r24, r20
 2ac:	95 0b       	sbc	r25, r21
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__vector_6+0x52>
 2b0:	82 0f       	add	r24, r18
 2b2:	93 1f       	adc	r25, r19
 2b4:	9b bd       	out	0x2b, r25	; 43
 2b6:	8a bd       	out	0x2a, r24	; 42
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_7>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	c7 e6       	ldi	r28, 0x67	; 103
 306:	d0 e0       	ldi	r29, 0x00	; 0
 308:	ea 85       	ldd	r30, Y+10	; 0x0a
 30a:	fb 85       	ldd	r31, Y+11	; 0x0b
 30c:	8d e6       	ldi	r24, 0x6D	; 109
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	09 95       	icall
 312:	8c bf       	out	0x3c, r24	; 60
 314:	2c b5       	in	r18, 0x2c	; 44
 316:	3d b5       	in	r19, 0x2d	; 45
 318:	a9 01       	movw	r20, r18
 31a:	40 95       	com	r20
 31c:	50 95       	com	r21
 31e:	88 85       	ldd	r24, Y+8	; 0x08
 320:	99 85       	ldd	r25, Y+9	; 0x09
 322:	48 17       	cp	r20, r24
 324:	59 07       	cpc	r21, r25
 326:	18 f4       	brcc	.+6      	; 0x32e <__vector_7+0x50>
 328:	84 1b       	sub	r24, r20
 32a:	95 0b       	sbc	r25, r21
 32c:	02 c0       	rjmp	.+4      	; 0x332 <__vector_7+0x54>
 32e:	82 0f       	add	r24, r18
 330:	93 1f       	adc	r25, r19
 332:	99 bd       	out	0x29, r25	; 41
 334:	88 bd       	out	0x28, r24	; 40
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <vtw>:

void vtw(uint16_t volt, uint8_t input){
	if (volt < 100){
 35c:	84 36       	cpi	r24, 0x64	; 100
 35e:	91 05       	cpc	r25, r1
 360:	80 f4       	brcc	.+32     	; 0x382 <vtw+0x26>
		lfo[input].wave = &sinewave_;
 362:	86 2f       	mov	r24, r22
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	86 0f       	add	r24, r22
 368:	91 1d       	adc	r25, r1
 36a:	86 0f       	add	r24, r22
 36c:	91 1d       	adc	r25, r1
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	fc 01       	movw	r30, r24
 374:	e9 59       	subi	r30, 0x99	; 153
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	89 e1       	ldi	r24, 0x19	; 25
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	95 83       	std	Z+5, r25	; 0x05
 37e:	84 83       	std	Z+4, r24	; 0x04
 380:	08 95       	ret
		} else if (volt < 200){
 382:	88 3c       	cpi	r24, 0xC8	; 200
 384:	91 05       	cpc	r25, r1
 386:	80 f4       	brcc	.+32     	; 0x3a8 <vtw+0x4c>
		lfo[input].wave = &sawtooth;
 388:	86 2f       	mov	r24, r22
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	86 0f       	add	r24, r22
 38e:	91 1d       	adc	r25, r1
 390:	86 0f       	add	r24, r22
 392:	91 1d       	adc	r25, r1
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	fc 01       	movw	r30, r24
 39a:	e9 59       	subi	r30, 0x99	; 153
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	8d ea       	ldi	r24, 0xAD	; 173
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	95 83       	std	Z+5, r25	; 0x05
 3a4:	84 83       	std	Z+4, r24	; 0x04
 3a6:	08 95       	ret
		} else if (volt < 300){
 3a8:	8c 32       	cpi	r24, 0x2C	; 44
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	92 07       	cpc	r25, r18
 3ae:	80 f4       	brcc	.+32     	; 0x3d0 <vtw+0x74>
		lfo[input].wave = &reversesaw;
 3b0:	86 2f       	mov	r24, r22
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	86 0f       	add	r24, r22
 3b6:	91 1d       	adc	r25, r1
 3b8:	86 0f       	add	r24, r22
 3ba:	91 1d       	adc	r25, r1
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	fc 01       	movw	r30, r24
 3c2:	e9 59       	subi	r30, 0x99	; 153
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	83 eb       	ldi	r24, 0xB3	; 179
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	95 83       	std	Z+5, r25	; 0x05
 3cc:	84 83       	std	Z+4, r24	; 0x04
 3ce:	08 95       	ret
		} else if (volt < 400){
 3d0:	80 39       	cpi	r24, 0x90	; 144
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	92 07       	cpc	r25, r18
 3d6:	80 f4       	brcc	.+32     	; 0x3f8 <vtw+0x9c>
		lfo[input].wave = &triangle;
 3d8:	86 2f       	mov	r24, r22
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	86 0f       	add	r24, r22
 3de:	91 1d       	adc	r25, r1
 3e0:	86 0f       	add	r24, r22
 3e2:	91 1d       	adc	r25, r1
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	fc 01       	movw	r30, r24
 3ea:	e9 59       	subi	r30, 0x99	; 153
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	89 eb       	ldi	r24, 0xB9	; 185
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	95 83       	std	Z+5, r25	; 0x05
 3f4:	84 83       	std	Z+4, r24	; 0x04
 3f6:	08 95       	ret
		} else if (volt < 700){
 3f8:	8c 3b       	cpi	r24, 0xBC	; 188
 3fa:	22 e0       	ldi	r18, 0x02	; 2
 3fc:	92 07       	cpc	r25, r18
 3fe:	80 f4       	brcc	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		lfo[input].wave = &square_p;
 400:	86 2f       	mov	r24, r22
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	86 0f       	add	r24, r22
 406:	91 1d       	adc	r25, r1
 408:	86 0f       	add	r24, r22
 40a:	91 1d       	adc	r25, r1
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	fc 01       	movw	r30, r24
 412:	e9 59       	subi	r30, 0x99	; 153
 414:	ff 4f       	sbci	r31, 0xFF	; 255
 416:	87 ed       	ldi	r24, 0xD7	; 215
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	95 83       	std	Z+5, r25	; 0x05
 41c:	84 83       	std	Z+4, r24	; 0x04
 41e:	08 95       	ret
		} else if (volt < 800){
 420:	80 32       	cpi	r24, 0x20	; 32
 422:	23 e0       	ldi	r18, 0x03	; 3
 424:	92 07       	cpc	r25, r18
 426:	80 f4       	brcc	.+32     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		lfo[input].wave = &square_n;
 428:	86 2f       	mov	r24, r22
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	86 0f       	add	r24, r22
 42e:	91 1d       	adc	r25, r1
 430:	86 0f       	add	r24, r22
 432:	91 1d       	adc	r25, r1
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	fc 01       	movw	r30, r24
 43a:	e9 59       	subi	r30, 0x99	; 153
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	8d ee       	ldi	r24, 0xED	; 237
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	95 83       	std	Z+5, r25	; 0x05
 444:	84 83       	std	Z+4, r24	; 0x04
 446:	08 95       	ret
		} else if (volt < 900) {
 448:	84 38       	cpi	r24, 0x84	; 132
 44a:	93 40       	sbci	r25, 0x03	; 3
 44c:	80 f4       	brcc	.+32     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		lfo[input].wave = &square_f;
 44e:	86 2f       	mov	r24, r22
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	86 0f       	add	r24, r22
 454:	91 1d       	adc	r25, r1
 456:	86 0f       	add	r24, r22
 458:	91 1d       	adc	r25, r1
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	fc 01       	movw	r30, r24
 460:	e9 59       	subi	r30, 0x99	; 153
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	95 83       	std	Z+5, r25	; 0x05
 46a:	84 83       	std	Z+4, r24	; 0x04
 46c:	08 95       	ret
		} else {
		lfo[input].wave = &sampleAndHold;
 46e:	86 2f       	mov	r24, r22
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	86 0f       	add	r24, r22
 474:	91 1d       	adc	r25, r1
 476:	86 0f       	add	r24, r22
 478:	91 1d       	adc	r25, r1
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	fc 01       	movw	r30, r24
 480:	e9 59       	subi	r30, 0x99	; 153
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	83 e2       	ldi	r24, 0x23	; 35
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	95 83       	std	Z+5, r25	; 0x05
 48a:	84 83       	std	Z+4, r24	; 0x04
 48c:	08 95       	ret

0000048e <enableADC>:
	}
}
void enableADC(){
	DDRA &= ~(1 << PINA0) | ~(1 << PINA1) | ~(1 << PINA2) | ~(PINA3);
 48e:	8a b3       	in	r24, 0x1a	; 26
 490:	8a bb       	out	0x1a, r24	; 26
	ADMUX = 0;							// select PB3
 492:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);	 //use 128 division factor
 494:	86 b1       	in	r24, 0x06	; 6
 496:	87 60       	ori	r24, 0x07	; 7
 498:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);									//ADC enable
 49a:	37 9a       	sbi	0x06, 7	; 6
 49c:	08 95       	ret

0000049e <adc_conversion>:

//CLK FREQUENCY IS 8 MHz (be sure to set the system clock prescale to 0)
void adc_conversion(uint8_t input){
	static uint16_t clipped = 0;
	    //clear lower 3 bits of admux
	    ADMUX &= 0xF8;
 49e:	97 b1       	in	r25, 0x07	; 7
 4a0:	98 7f       	andi	r25, 0xF8	; 248
 4a2:	97 b9       	out	0x07, r25	; 7
		ADMUX |= input;
 4a4:	97 b1       	in	r25, 0x07	; 7
 4a6:	98 2b       	or	r25, r24
 4a8:	97 b9       	out	0x07, r25	; 7
		// start single conversion
		// write '1' to ADSC
		ADCSRA |= (1<<ADSC);
 4aa:	36 9a       	sbi	0x06, 6	; 6
		
		// wait for conversion to complete
		// ADSC becomes '0' again
		// till then, run loop continuously
		while(ADCSRA & (1<<ADSC));
 4ac:	36 99       	sbic	0x06, 6	; 6
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <adc_conversion+0xe>
		new_conversion = 0;
 4b0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <new_conversion+0x1>
 4b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <new_conversion>
		new_conversion = ADCL;
 4b8:	24 b1       	in	r18, 0x04	; 4
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <new_conversion+0x1>
 4c0:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <new_conversion>
		new_conversion |= ADCH << 8;
 4c4:	95 b1       	in	r25, 0x05	; 5
 4c6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 4ca:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 4ce:	39 2b       	or	r19, r25
 4d0:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <new_conversion+0x1>
 4d4:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <new_conversion>
		
		if (input == 0){
 4d8:	81 11       	cpse	r24, r1
 4da:	28 c0       	rjmp	.+80     	; 0x52c <adc_conversion+0x8e>
			if ((new_conversion <= (wconversion - 30) || new_conversion >= (wconversion + 30))){
 4dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 4e0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 4e4:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 4e8:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 4ec:	4e 97       	sbiw	r24, 0x1e	; 30
 4ee:	82 17       	cp	r24, r18
 4f0:	93 07       	cpc	r25, r19
 4f2:	68 f4       	brcc	.+26     	; 0x50e <adc_conversion+0x70>
 4f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 4f8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 4fc:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 500:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 504:	4e 96       	adiw	r24, 0x1e	; 30
 506:	28 17       	cp	r18, r24
 508:	39 07       	cpc	r19, r25
 50a:	08 f4       	brcc	.+2      	; 0x50e <adc_conversion+0x70>
 50c:	32 c1       	rjmp	.+612    	; 0x772 <adc_conversion+0x2d4>
				wconversion = new_conversion;
 50e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <new_conversion>
 512:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <new_conversion+0x1>
 516:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <wconversion+0x1>
 51a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <wconversion>
				vtw(wconversion, 0);
 51e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 522:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	19 df       	rcall	.-462    	; 0x35c <vtw>
 52a:	08 95       	ret
			}
			
		}
		else if(input == 1){
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	69 f5       	brne	.+90     	; 0x58a <adc_conversion+0xec>
			if ((new_conversion <= (conversion - DEADBAND) || new_conversion >= (conversion + DEADBAND))){
 530:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 534:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 538:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 53c:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 540:	0a 97       	sbiw	r24, 0x0a	; 10
 542:	82 17       	cp	r24, r18
 544:	93 07       	cpc	r25, r19
 546:	68 f4       	brcc	.+26     	; 0x562 <adc_conversion+0xc4>
 548:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 54c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 550:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 554:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 558:	0a 96       	adiw	r24, 0x0a	; 10
 55a:	28 17       	cp	r18, r24
 55c:	39 07       	cpc	r19, r25
 55e:	08 f4       	brcc	.+2      	; 0x562 <adc_conversion+0xc4>
 560:	08 c1       	rjmp	.+528    	; 0x772 <adc_conversion+0x2d4>
				conversion = new_conversion ;
 562:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <new_conversion>
 566:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <new_conversion+0x1>
 56a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <conversion+0x1>
 56e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <conversion>
				lfo[0].delay = conversion / 10;
 572:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 576:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 57a:	6a e0       	ldi	r22, 0x0A	; 10
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	27 d1       	rcall	.+590    	; 0x7ce <__udivmodhi4>
 580:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <lfo+0x3>
 584:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <lfo+0x2>
 588:	08 95       	ret
			}
		}
		else if (input == 2){
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	41 f5       	brne	.+80     	; 0x5de <adc_conversion+0x140>
			if ((new_conversion <= (wconversion - 30) || new_conversion >= (wconversion + 30))){
 58e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 592:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 596:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 59a:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 59e:	4e 97       	sbiw	r24, 0x1e	; 30
 5a0:	82 17       	cp	r24, r18
 5a2:	93 07       	cpc	r25, r19
 5a4:	68 f4       	brcc	.+26     	; 0x5c0 <adc_conversion+0x122>
 5a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 5aa:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 5ae:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 5b2:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 5b6:	4e 96       	adiw	r24, 0x1e	; 30
 5b8:	28 17       	cp	r18, r24
 5ba:	39 07       	cpc	r19, r25
 5bc:	08 f4       	brcc	.+2      	; 0x5c0 <adc_conversion+0x122>
 5be:	d9 c0       	rjmp	.+434    	; 0x772 <adc_conversion+0x2d4>
				wconversion = new_conversion;
 5c0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <new_conversion>
 5c4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <new_conversion+0x1>
 5c8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <wconversion+0x1>
 5cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <wconversion>
				vtw(wconversion, 1);
 5d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <wconversion>
 5d4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <wconversion+0x1>
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	c0 de       	rcall	.-640    	; 0x35c <vtw>
 5dc:	08 95       	ret
			}
			
		}
		else if(input == 3){
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	69 f5       	brne	.+90     	; 0x63c <adc_conversion+0x19e>
			if ((new_conversion <= (conversion - DEADBAND) || new_conversion >= (conversion + DEADBAND))){
 5e2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 5e6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 5ea:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 5ee:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 5f2:	0a 97       	sbiw	r24, 0x0a	; 10
 5f4:	82 17       	cp	r24, r18
 5f6:	93 07       	cpc	r25, r19
 5f8:	68 f4       	brcc	.+26     	; 0x614 <adc_conversion+0x176>
 5fa:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 5fe:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 602:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 606:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 60a:	0a 96       	adiw	r24, 0x0a	; 10
 60c:	28 17       	cp	r18, r24
 60e:	39 07       	cpc	r19, r25
 610:	08 f4       	brcc	.+2      	; 0x614 <adc_conversion+0x176>
 612:	af c0       	rjmp	.+350    	; 0x772 <adc_conversion+0x2d4>
				conversion = new_conversion ;
 614:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <new_conversion>
 618:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <new_conversion+0x1>
 61c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <conversion+0x1>
 620:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <conversion>
				lfo[1].delay = conversion / 10; 
 624:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 628:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	ce d0       	rcall	.+412    	; 0x7ce <__udivmodhi4>
 632:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <lfo+0x9>
 636:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <lfo+0x8>
 63a:	08 95       	ret
			}
		}
		else if(input == 4){
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	09 f0       	breq	.+2      	; 0x642 <adc_conversion+0x1a4>
 640:	98 c0       	rjmp	.+304    	; 0x772 <adc_conversion+0x2d4>
			if ((new_conversion <= (conversion - DEADBAND) || new_conversion >= (conversion + DEADBAND))){
 642:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 646:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 64a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 64e:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 652:	0a 97       	sbiw	r24, 0x0a	; 10
 654:	82 17       	cp	r24, r18
 656:	93 07       	cpc	r25, r19
 658:	68 f4       	brcc	.+26     	; 0x674 <adc_conversion+0x1d6>
 65a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 65e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 662:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <new_conversion>
 666:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <new_conversion+0x1>
 66a:	0a 96       	adiw	r24, 0x0a	; 10
 66c:	28 17       	cp	r18, r24
 66e:	39 07       	cpc	r19, r25
 670:	08 f4       	brcc	.+2      	; 0x674 <adc_conversion+0x1d6>
 672:	7f c0       	rjmp	.+254    	; 0x772 <adc_conversion+0x2d4>
				conversion = new_conversion;
 674:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <new_conversion>
 678:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <new_conversion+0x1>
 67c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <conversion+0x1>
 680:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <conversion>
				if(conversion < 400 && !clipped){
 684:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 688:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 68c:	80 39       	cpi	r24, 0x90	; 144
 68e:	91 40       	sbci	r25, 0x01	; 1
 690:	50 f4       	brcc	.+20     	; 0x6a6 <adc_conversion+0x208>
 692:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 696:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 69a:	89 2b       	or	r24, r25
 69c:	21 f4       	brne	.+8      	; 0x6a6 <adc_conversion+0x208>
					  PORTB &= 0xFC;
 69e:	88 b3       	in	r24, 0x18	; 24
 6a0:	8c 7f       	andi	r24, 0xFC	; 252
 6a2:	88 bb       	out	0x18, r24	; 24
 6a4:	08 95       	ret
				}
				else if(conversion < 600 && !clipped){
 6a6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 6aa:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 6ae:	88 35       	cpi	r24, 0x58	; 88
 6b0:	92 40       	sbci	r25, 0x02	; 2
 6b2:	60 f4       	brcc	.+24     	; 0x6cc <adc_conversion+0x22e>
 6b4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 6b8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 6bc:	89 2b       	or	r24, r25
 6be:	09 f0       	breq	.+2      	; 0x6c2 <adc_conversion+0x224>
 6c0:	4b c0       	rjmp	.+150    	; 0x758 <adc_conversion+0x2ba>
					//yellow		
				    PORTB &= 0xFC;
 6c2:	88 b3       	in	r24, 0x18	; 24
 6c4:	8c 7f       	andi	r24, 0xFC	; 252
 6c6:	88 bb       	out	0x18, r24	; 24
                    PORTB |= 0x01;
 6c8:	c0 9a       	sbi	0x18, 0	; 24
 6ca:	08 95       	ret
				}
				else if (conversion < 800 && !clipped){
 6cc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 6d0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 6d4:	80 32       	cpi	r24, 0x20	; 32
 6d6:	93 40       	sbci	r25, 0x03	; 3
 6d8:	68 f4       	brcc	.+26     	; 0x6f4 <adc_conversion+0x256>
 6da:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 6de:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	61 f5       	brne	.+88     	; 0x73e <adc_conversion+0x2a0>
					//both (orange)
					PORTB &= 0xFC;
 6e6:	88 b3       	in	r24, 0x18	; 24
 6e8:	8c 7f       	andi	r24, 0xFC	; 252
 6ea:	88 bb       	out	0x18, r24	; 24
					 PORTB |= 0x03;
 6ec:	88 b3       	in	r24, 0x18	; 24
 6ee:	83 60       	ori	r24, 0x03	; 3
 6f0:	88 bb       	out	0x18, r24	; 24
 6f2:	08 95       	ret
				}
				else if( conversion < 1024|| clipped){
 6f4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 6f8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 6fc:	81 15       	cp	r24, r1
 6fe:	94 40       	sbci	r25, 0x04	; 4
 700:	38 f0       	brcs	.+14     	; 0x710 <adc_conversion+0x272>
 702:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 706:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	91 f1       	breq	.+100    	; 0x772 <adc_conversion+0x2d4>
 70e:	11 c0       	rjmp	.+34     	; 0x732 <adc_conversion+0x294>
					//red
					if (!clipped){
 710:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 714:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	59 f4       	brne	.+22     	; 0x732 <adc_conversion+0x294>
						clipped = 1;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 724:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
						PORTB &= 0xFC;
 728:	88 b3       	in	r24, 0x18	; 24
 72a:	8c 7f       	andi	r24, 0xFC	; 252
 72c:	88 bb       	out	0x18, r24	; 24
						PORTB |= 0x02;
 72e:	c1 9a       	sbi	0x18, 1	; 24
 730:	08 95       	ret
					} else { 
						clipped--;
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 738:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
				}
			}
		}


}
 73c:	08 95       	ret
				else if (conversion < 800 && !clipped){
					//both (orange)
					PORTB &= 0xFC;
					 PORTB |= 0x03;
				}
				else if( conversion < 1024|| clipped){
 73e:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <conversion>
 742:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <conversion+0x1>
 746:	21 15       	cp	r18, r1
 748:	34 40       	sbci	r19, 0x04	; 4
 74a:	98 f3       	brcs	.-26     	; 0x732 <adc_conversion+0x294>
 74c:	0d c0       	rjmp	.+26     	; 0x768 <adc_conversion+0x2ca>
				else if(conversion < 600 && !clipped){
					//yellow		
				    PORTB &= 0xFC;
                    PORTB |= 0x01;
				}
				else if (conversion < 800 && !clipped){
 74e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 752:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 756:	f3 cf       	rjmp	.-26     	; 0x73e <adc_conversion+0x2a0>
 758:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <conversion>
 75c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <conversion+0x1>
 760:	80 32       	cpi	r24, 0x20	; 32
 762:	93 40       	sbci	r25, 0x03	; 3
 764:	a0 f3       	brcs	.-24     	; 0x74e <adc_conversion+0x2b0>
 766:	c6 cf       	rjmp	.-116    	; 0x6f4 <adc_conversion+0x256>
					//both (orange)
					PORTB &= 0xFC;
					 PORTB |= 0x03;
				}
				else if( conversion < 1024|| clipped){
 768:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 76c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 770:	e0 cf       	rjmp	.-64     	; 0x732 <adc_conversion+0x294>
 772:	08 95       	ret

00000774 <main>:

}

int main(void) {
	//Set PORTB1 pin as output
	cli();
 774:	f8 94       	cli
	DDRB = (1 << PORTB2) | (1 << PORTB1) | (1 << PORTB0);
 776:	87 e0       	ldi	r24, 0x07	; 7
 778:	87 bb       	out	0x17, r24	; 23
	DDRA = (1 << PORTA7);
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	8a bb       	out	0x1a, r24	; 26
	//PORTB = (1 << PINB0) | (1 << PINB1);
	// initial OCR0A value
	OCR0A = 80;
 77e:	c0 e5       	ldi	r28, 0x50	; 80
 780:	c6 bf       	out	0x36, r28	; 54
	OCR0B = 80;
 782:	cc bf       	out	0x3c, r28	; 60
	//Output compare OC0A 8 bit non inverted PWM
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
 784:	93 ea       	ldi	r25, 0xA3	; 163
 786:	90 bf       	out	0x30, r25	; 48
	//start timer without prescaler
	
	//enable output compare interrupt for OCR0A and OCR0B
	TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B);
 788:	96 e0       	ldi	r25, 0x06	; 6
 78a:	9c b9       	out	0x0c, r25	; 12
	//TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);
	
	TCCR1A = 0;
 78c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 78e:	1e bc       	out	0x2e, r1	; 46
	//clock change
CLKPR = (1 << CLKPCE);
 790:	86 bd       	out	0x26, r24	; 38
CLKPR = 0;
 792:	16 bc       	out	0x26, r1	; 38
    TCCR0B= (1 << CS00);
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	83 bf       	out	0x33, r24	; 51
	TCCR1B = ( 1 << CS02);
 798:	84 e0       	ldi	r24, 0x04	; 4
 79a:	8e bd       	out	0x2e, r24	; 46
	//CLKPR = (1 << CLKPCE); 
	//ADC
	enableADC();
 79c:	78 de       	rcall	.-784    	; 0x48e <enableADC>
    OCR0A = 80;
 79e:	c6 bf       	out	0x36, r28	; 54
	OCR0B = 80;
 7a0:	cc bf       	out	0x3c, r28	; 60
	OCR1A = 80;
 7a2:	80 e5       	ldi	r24, 0x50	; 80
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	9b bd       	out	0x2b, r25	; 43
 7a8:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
 7aa:	1d bc       	out	0x2d, r1	; 45
 7ac:	1c bc       	out	0x2c, r1	; 44
	OCR1B = 60;
 7ae:	8c e3       	ldi	r24, 0x3C	; 60
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	99 bd       	out	0x29, r25	; 41
 7b4:	88 bd       	out	0x28, r24	; 40
	sei();
 7b6:	78 94       	sei

	//PORTB |= (1 << PB1);
	while (1){
		adc_conversion(0);
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	71 de       	rcall	.-798    	; 0x49e <adc_conversion>
		adc_conversion(1);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	6f de       	rcall	.-802    	; 0x49e <adc_conversion>
		adc_conversion(2);
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	6d de       	rcall	.-806    	; 0x49e <adc_conversion>
		adc_conversion(3);
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	6b de       	rcall	.-810    	; 0x49e <adc_conversion>
		adc_conversion(4);
 7c8:	84 e0       	ldi	r24, 0x04	; 4
 7ca:	69 de       	rcall	.-814    	; 0x49e <adc_conversion>
 7cc:	f5 cf       	rjmp	.-22     	; 0x7b8 <main+0x44>

000007ce <__udivmodhi4>:
 7ce:	aa 1b       	sub	r26, r26
 7d0:	bb 1b       	sub	r27, r27
 7d2:	51 e1       	ldi	r21, 0x11	; 17
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <__udivmodhi4_ep>

000007d6 <__udivmodhi4_loop>:
 7d6:	aa 1f       	adc	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	a6 17       	cp	r26, r22
 7dc:	b7 07       	cpc	r27, r23
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <__udivmodhi4_ep>
 7e0:	a6 1b       	sub	r26, r22
 7e2:	b7 0b       	sbc	r27, r23

000007e4 <__udivmodhi4_ep>:
 7e4:	88 1f       	adc	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	5a 95       	dec	r21
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__udivmodhi4_loop>
 7ec:	80 95       	com	r24
 7ee:	90 95       	com	r25
 7f0:	bc 01       	movw	r22, r24
 7f2:	cd 01       	movw	r24, r26
 7f4:	08 95       	ret

000007f6 <__divmodhi4>:
 7f6:	97 fb       	bst	r25, 7
 7f8:	07 2e       	mov	r0, r23
 7fa:	16 f4       	brtc	.+4      	; 0x800 <__divmodhi4+0xa>
 7fc:	00 94       	com	r0
 7fe:	06 d0       	rcall	.+12     	; 0x80c <__divmodhi4_neg1>
 800:	77 fd       	sbrc	r23, 7
 802:	08 d0       	rcall	.+16     	; 0x814 <__divmodhi4_neg2>
 804:	e4 df       	rcall	.-56     	; 0x7ce <__udivmodhi4>
 806:	07 fc       	sbrc	r0, 7
 808:	05 d0       	rcall	.+10     	; 0x814 <__divmodhi4_neg2>
 80a:	3e f4       	brtc	.+14     	; 0x81a <__divmodhi4_exit>

0000080c <__divmodhi4_neg1>:
 80c:	90 95       	com	r25
 80e:	81 95       	neg	r24
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	08 95       	ret

00000814 <__divmodhi4_neg2>:
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255

0000081a <__divmodhi4_exit>:
 81a:	08 95       	ret

0000081c <do_rand>:
 81c:	8f 92       	push	r8
 81e:	9f 92       	push	r9
 820:	af 92       	push	r10
 822:	bf 92       	push	r11
 824:	cf 92       	push	r12
 826:	df 92       	push	r13
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	ec 01       	movw	r28, r24
 832:	68 81       	ld	r22, Y
 834:	79 81       	ldd	r23, Y+1	; 0x01
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	9b 81       	ldd	r25, Y+3	; 0x03
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	81 05       	cpc	r24, r1
 840:	91 05       	cpc	r25, r1
 842:	21 f4       	brne	.+8      	; 0x84c <do_rand+0x30>
 844:	64 e2       	ldi	r22, 0x24	; 36
 846:	79 ed       	ldi	r23, 0xD9	; 217
 848:	8b e5       	ldi	r24, 0x5B	; 91
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	2d e1       	ldi	r18, 0x1D	; 29
 84e:	33 ef       	ldi	r19, 0xF3	; 243
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	55 d0       	rcall	.+170    	; 0x900 <__divmodsi4>
 856:	49 01       	movw	r8, r18
 858:	5a 01       	movw	r10, r20
 85a:	27 ea       	ldi	r18, 0xA7	; 167
 85c:	31 e4       	ldi	r19, 0x41	; 65
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	35 d0       	rcall	.+106    	; 0x8ce <__mulsi3>
 864:	6b 01       	movw	r12, r22
 866:	7c 01       	movw	r14, r24
 868:	2c ee       	ldi	r18, 0xEC	; 236
 86a:	34 ef       	ldi	r19, 0xF4	; 244
 86c:	4f ef       	ldi	r20, 0xFF	; 255
 86e:	5f ef       	ldi	r21, 0xFF	; 255
 870:	c5 01       	movw	r24, r10
 872:	b4 01       	movw	r22, r8
 874:	2c d0       	rcall	.+88     	; 0x8ce <__mulsi3>
 876:	dc 01       	movw	r26, r24
 878:	cb 01       	movw	r24, r22
 87a:	8c 0d       	add	r24, r12
 87c:	9d 1d       	adc	r25, r13
 87e:	ae 1d       	adc	r26, r14
 880:	bf 1d       	adc	r27, r15
 882:	b7 ff       	sbrs	r27, 7
 884:	03 c0       	rjmp	.+6      	; 0x88c <do_rand+0x70>
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	a1 09       	sbc	r26, r1
 88a:	b0 48       	sbci	r27, 0x80	; 128
 88c:	88 83       	st	Y, r24
 88e:	99 83       	std	Y+1, r25	; 0x01
 890:	aa 83       	std	Y+2, r26	; 0x02
 892:	bb 83       	std	Y+3, r27	; 0x03
 894:	9f 77       	andi	r25, 0x7F	; 127
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	cf 90       	pop	r12
 8a2:	bf 90       	pop	r11
 8a4:	af 90       	pop	r10
 8a6:	9f 90       	pop	r9
 8a8:	8f 90       	pop	r8
 8aa:	08 95       	ret

000008ac <rand_r>:
 8ac:	b7 df       	rcall	.-146    	; 0x81c <do_rand>
 8ae:	08 95       	ret

000008b0 <rand>:
 8b0:	80 e6       	ldi	r24, 0x60	; 96
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	b3 df       	rcall	.-154    	; 0x81c <do_rand>
 8b6:	08 95       	ret

000008b8 <srand>:
 8b8:	a0 e0       	ldi	r26, 0x00	; 0
 8ba:	b0 e0       	ldi	r27, 0x00	; 0
 8bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 8c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 8c4:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 8c8:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 8cc:	08 95       	ret

000008ce <__mulsi3>:
 8ce:	ee 27       	eor	r30, r30
 8d0:	ff 27       	eor	r31, r31

000008d2 <__mulsi3_helper>:
 8d2:	aa 27       	eor	r26, r26
 8d4:	bb 27       	eor	r27, r27
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__mulsi3_helper+0x16>
 8d8:	a2 0f       	add	r26, r18
 8da:	b3 1f       	adc	r27, r19
 8dc:	e4 1f       	adc	r30, r20
 8de:	f5 1f       	adc	r31, r21
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	44 1f       	adc	r20, r20
 8e6:	55 1f       	adc	r21, r21
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	98 f3       	brcs	.-26     	; 0x8d8 <__mulsi3_helper+0x6>
 8f2:	70 40       	sbci	r23, 0x00	; 0
 8f4:	a9 f7       	brne	.-22     	; 0x8e0 <__mulsi3_helper+0xe>
 8f6:	00 97       	sbiw	r24, 0x00	; 0
 8f8:	99 f7       	brne	.-26     	; 0x8e0 <__mulsi3_helper+0xe>
 8fa:	bd 01       	movw	r22, r26
 8fc:	cf 01       	movw	r24, r30
 8fe:	08 95       	ret

00000900 <__divmodsi4>:
 900:	05 2e       	mov	r0, r21
 902:	97 fb       	bst	r25, 7
 904:	16 f4       	brtc	.+4      	; 0x90a <__divmodsi4+0xa>
 906:	00 94       	com	r0
 908:	0f d0       	rcall	.+30     	; 0x928 <__negsi2>
 90a:	57 fd       	sbrc	r21, 7
 90c:	05 d0       	rcall	.+10     	; 0x918 <__divmodsi4_neg2>
 90e:	14 d0       	rcall	.+40     	; 0x938 <__udivmodsi4>
 910:	07 fc       	sbrc	r0, 7
 912:	02 d0       	rcall	.+4      	; 0x918 <__divmodsi4_neg2>
 914:	46 f4       	brtc	.+16     	; 0x926 <__divmodsi4_exit>
 916:	08 c0       	rjmp	.+16     	; 0x928 <__negsi2>

00000918 <__divmodsi4_neg2>:
 918:	50 95       	com	r21
 91a:	40 95       	com	r20
 91c:	30 95       	com	r19
 91e:	21 95       	neg	r18
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	4f 4f       	sbci	r20, 0xFF	; 255
 924:	5f 4f       	sbci	r21, 0xFF	; 255

00000926 <__divmodsi4_exit>:
 926:	08 95       	ret

00000928 <__negsi2>:
 928:	90 95       	com	r25
 92a:	80 95       	com	r24
 92c:	70 95       	com	r23
 92e:	61 95       	neg	r22
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	08 95       	ret

00000938 <__udivmodsi4>:
 938:	a1 e2       	ldi	r26, 0x21	; 33
 93a:	1a 2e       	mov	r1, r26
 93c:	aa 1b       	sub	r26, r26
 93e:	bb 1b       	sub	r27, r27
 940:	fd 01       	movw	r30, r26
 942:	0d c0       	rjmp	.+26     	; 0x95e <__udivmodsi4_ep>

00000944 <__udivmodsi4_loop>:
 944:	aa 1f       	adc	r26, r26
 946:	bb 1f       	adc	r27, r27
 948:	ee 1f       	adc	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	a2 17       	cp	r26, r18
 94e:	b3 07       	cpc	r27, r19
 950:	e4 07       	cpc	r30, r20
 952:	f5 07       	cpc	r31, r21
 954:	20 f0       	brcs	.+8      	; 0x95e <__udivmodsi4_ep>
 956:	a2 1b       	sub	r26, r18
 958:	b3 0b       	sbc	r27, r19
 95a:	e4 0b       	sbc	r30, r20
 95c:	f5 0b       	sbc	r31, r21

0000095e <__udivmodsi4_ep>:
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	1a 94       	dec	r1
 968:	69 f7       	brne	.-38     	; 0x944 <__udivmodsi4_loop>
 96a:	60 95       	com	r22
 96c:	70 95       	com	r23
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	9b 01       	movw	r18, r22
 974:	ac 01       	movw	r20, r24
 976:	bd 01       	movw	r22, r26
 978:	cf 01       	movw	r24, r30
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
